# Text Chatbot acting as an attorney with no History.
# The completion is generated by the Groq API 

#Import necessary libraries
import os
import logging
from groq import Groq
from dotenv import load_dotenv

# Load environment variables
load_dotenv() 
# Initialize the Groq client
client = Groq() 
# Check if the GROQ_API_KEY environment variable is set
if not client.api_key:
    raise ValueError("GROQ_API_KEY environment variable is not set")

#Define functions
model_name="llama-3.3-70b-versatile" 
def generate_completion(messages):
    try:
        chat_completion = client.chat.completions.create(
            messages=messages,
            model=model_name,
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        logging.error(f"Error generating completion: {e}")
        return None

def main():
    os.system(command="cls")
    print("Welcome to Sepehrix Chatbot!\n")
    print("I am an experienced attorney. I am here to help you with your legal issues.\n")
    print("You can end the conversation by typing 'quit', 'exit', or 'bye'. \n")
    print("-" * 50)

    while True:
        messages = []
        system_prompt = "You are acting as an experienced first-class attorney in Iran country. You are here to provide legal advice to the user."
        system_message = {"role": "system", "content": system_prompt}
        messages.append(system_message)

        user_prompt: str = input("User: ")
        if user_prompt.lower() in ["quit", "exit", "bye"]:
            break
        print(" \n")

        user_message = {"role": "user", "content": user_prompt}
        messages.append(user_message)
        assistant_answer=generate_completion(messages)
        result = f"\nAI: {assistant_answer}"
        print(f"Attorney: {result}\n")
        print("-" * 50)

# Operation

if __name__ == "__main__":

    main()
